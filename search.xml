<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Matlab编译安装MatConvnet流程及问题解决</title>
    <url>/2020/05/12/Matlab%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85MatConvnet%E6%B5%81%E7%A8%8B%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p><strong>最近使用Matlab跑深度学习的项目，需要安装MatConvnet，在这个过程中遇到了一些问题，成功解决后特在此总结如下。</strong></p>
<p><strong>一、安装及编译流程</strong></p>
<p> <strong>1. MatConvNet介绍：</strong> <a href="https://www.vlfeat.org/matconvnet/install/#compiling" target="_blank" rel="noopener">Installing - MatConvNet</a><br> <strong>2. 配置编译器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; mex -setup</span><br></pre></td></tr></table></figure>

<p> <strong>3. 编译用于CPU的库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> &lt;MatConvNet&gt;</span><br><span class="line">&gt; addpath matlab</span><br><span class="line">&gt; vl_compilenn</span><br></pre></td></tr></table></figure>

<p> <strong>4. 编译用于GPU的库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; vl_compilenn(<span class="string">'enableGpu'</span>,<span class="literal">true</span>,<span class="string">'cudaRoot'</span>,<span class="string">'C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0'</span>,<span class="string">'cudaMethod'</span> ,<span class="string">'nvcc'</span>,<span class="string">'enableCudnn'</span>,<span class="string">'true'</span>,<span class="string">'cudnnRoot'</span>,<span class="string">'C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA'</span>)</span><br></pre></td></tr></table></figure>

<p><strong>上述4步执行完如无报错则说明安装编译成功。</strong></p>
<p><strong>下面介绍安装编译过程中遇到的问题及成功解决方法。</strong></p>
<p><strong>二、问题及解决方法(注意本文中所涉及的文件路径请根据自身实际情况就行修改)</strong></p>
<p> <strong>1. 报错1</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Warning: CL.EXE not found <span class="keyword">in</span> PATH. Trying to guess out of mex setup. </span><br><span class="line">&gt; In vl_compilenn&gt;check_clpath (line 650)</span><br><span class="line">  In vl_compilenn (line 426) </span><br><span class="line"><span class="string">'cl.exe'</span> is not recognized as an internal or external <span class="built_in">command</span>, </span><br><span class="line">operable program or batch file. </span><br><span class="line">Error using vl_compilenn&gt;check_clpath (line 656)</span><br><span class="line">Unable to find cl.exe</span><br><span class="line"></span><br><span class="line">Error <span class="keyword">in</span> vl_compilenn (line 426)</span><br><span class="line">    cl_path = fileparts(check_clpath()); % check whether cl.exe <span class="keyword">in</span> path</span><br></pre></td></tr></table></figure>
<p>解决方法：把 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\bin\Hostx64\x64 下的cl.exe复制到 D:\Matlab\matconvnet-1.0-beta25\matconvnet-1.0-beta25\ 下。</p>
<p> <strong>2. 报错2</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error using vl_compilenn&gt;nvcc_compile (line 615)</span><br><span class="line">Command <span class="string">"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\bin\nvcc"</span> -c -o</span><br><span class="line"><span class="string">"D:\Matlab\matconvnet-1.0-beta25\matconvnet-1.0-beta25\matlab\mex\.build\bits\data.obj"</span></span><br><span class="line"><span class="string">"D:\Matlab\matconvnet-1.0-beta25\matconvnet-1.0-beta25\matlab\src\bits\data.cu"</span> -DENABLE_GPU -DENABLE_DOUBLE</span><br><span class="line">-DENABLE_CUDNN -I<span class="string">".local\cudnn\include"</span> -O -DNDEBUG -D_FORCE_INLINES --std=c++11</span><br><span class="line">-I<span class="string">"D:\Matlab\extern\include"</span> -I<span class="string">"D:\Matlab\toolbox\distcomp\gpu\extern\include"</span></span><br><span class="line">-gencode=arch=compute_52,code=\"sm_52,compute_52\"  --compiler-options=/MD --compiler-bindir=<span class="string">"C:\Program</span></span><br><span class="line"><span class="string">Files (x86)\Microsoft Visual Studio\2017\Community\VC\bin"</span>  failed.</span><br><span class="line"></span><br><span class="line">Error <span class="keyword">in</span> vl_compilenn (line 487)</span><br><span class="line">      nvcc_compile(opts, srcs&#123;i&#125;, objfile, flags) ;</span><br></pre></td></tr></table></figure>
<p>解决方法：在 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC 下创建bin文件夹。</p>
<p> <strong>3. 报错3</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">c:\program files\nvidia gpu computing toolkit\cuda\v9.0\include\crt/host_config.h(133): fatal error C1189: <span class="comment">#error:  -- unsupported Microsoft Visual Studio version! Only the versions 2012, 2013, 2015 and 2017 are supported! </span></span><br><span class="line">nvcc warning : The -std=c++11 flag is not supported with the configured host compiler. Flag will be ignored. </span><br><span class="line">data.cu </span><br><span class="line">Error using vl_compilenn&gt;nvcc_compile (line 615)</span><br><span class="line">Command <span class="string">"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\bin\nvcc"</span> -c -o</span><br><span class="line"><span class="string">"D:\Matlab\matconvnet-1.0-beta25\matconvnet-1.0-beta25\matlab\mex\.build\bits\data.obj"</span></span><br><span class="line"><span class="string">"D:\Matlab\matconvnet-1.0-beta25\matconvnet-1.0-beta25\matlab\src\bits\data.cu"</span> -DENABLE_GPU -DENABLE_DOUBLE</span><br><span class="line">-DENABLE_CUDNN -I<span class="string">"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\include"</span> -O -DNDEBUG -D_FORCE_INLINES</span><br><span class="line">--std=c++11 -I<span class="string">"D:\Matlab\extern\include"</span> -I<span class="string">"D:\Matlab\toolbox\distcomp\gpu\extern\include"</span></span><br><span class="line">-gencode=arch=compute_52,code=\"sm_52,compute_52\"  --compiler-options=/MD --compiler-bindir=<span class="string">"C:\Program</span></span><br><span class="line"><span class="string">Files (x86)\Microsoft Visual Studio\2017\Community\VC\bin"</span>  failed.</span><br><span class="line"></span><br><span class="line">Error <span class="keyword">in</span> vl_compilenn (line 487)</span><br><span class="line">      nvcc_compile(opts, srcs&#123;i&#125;, objfile, flags) ;</span><br></pre></td></tr></table></figure>
<p>错误原因：CUDA和VS版本不匹配。<br>解决方法：打开C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\include\crt\host_config.h，把<br>#if _MSC_VER &lt; 1600 || _MSC_VER &gt; 1911<br>改为：<br>#if _MSC_VER &lt; 1600 || _MSC_VER &gt; 1920 // 只要版本号够高就行，随便挑个数字<br>即可解决。</p>
<p> <strong>4. 报错4</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x00007FF64188ADD0 (0x0000000000000000 0x000001E56C1C7F18 0x000066BA00000001 0x00000004000304ED) </span><br><span class="line">0x00007FF641886F3D (0x0000009EBEFFE798 0x0000000000000000 0x0000000000000000 0x000001E56C1DCE20) </span><br><span class="line">0x00007FF641888713 (0xnvcc warning : The -std=c++11 flag is not supported with the configured host compiler. Flag will be ignored. </span><br><span class="line">data.cu </span><br><span class="line">nvcc error   : <span class="string">'cicc'</span> died with status 0xC0000005 (ACCESS_VIOLATION) </span><br><span class="line">Error using vl_compilenn&gt;nvcc_compile (line 615)</span><br><span class="line">Command <span class="string">"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\bin\nvcc"</span> -c -o</span><br><span class="line"><span class="string">"D:\Matlab\matconvnet-1.0-beta25\matconvnet-1.0-beta25\matlab\mex\.build\bits\data.obj"</span></span><br><span class="line"><span class="string">"D:\Matlab\matconvnet-1.0-beta25\matconvnet-1.0-beta25\matlab\src\bits\data.cu"</span> -DENABLE_GPU -DENABLE_DOUBLE</span><br><span class="line">-DENABLE_CUDNN -I<span class="string">"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\include"</span> -O -DNDEBUG -D_FORCE_INLINES</span><br><span class="line">--std=c++11 -I<span class="string">"D:\Matlab\extern\include"</span> -I<span class="string">"D:\Matlab\toolbox\distcomp\gpu\extern\include"</span></span><br><span class="line">-gencode=arch=compute_52,code=\"sm_52,compute_52\"  --compiler-options=/MD --compiler-bindir=<span class="string">"C:\Program</span></span><br><span class="line"><span class="string">Files (x86)\Microsoft Visual Studio\2017\Community\VC\bin"</span>  failed.</span><br><span class="line"></span><br><span class="line">Error <span class="keyword">in</span> vl_compilenn (line 487)</span><br><span class="line">      nvcc_compile(opts, srcs&#123;i&#125;, objfile, flags) ;</span><br></pre></td></tr></table></figure>
<p>错误原因：使用CUDA9.0可能会导致上述错误。<br>解决方法：当使用Visual Studio 2017 Community时，CUDA使用 10.0版本。即搭配为<strong>Compatible: Visual Studio 2017 | Cuda 10.0 | Matlab R2018a</strong>。重新编译即可解决。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; vl_compilenn(<span class="string">'enableGpu'</span>, <span class="literal">true</span>, ...</span><br><span class="line">  <span class="string">'cudaRoot'</span>, <span class="string">'C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.0'</span>, ...</span><br><span class="line">  <span class="string">'cudaMethod'</span>, <span class="string">'nvcc'</span>, ...</span><br><span class="line">  <span class="string">'enableCudnn'</span>, <span class="literal">true</span>, ...</span><br><span class="line">  <span class="string">'cudnnRoot'</span>, <span class="string">'C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.0'</span>);</span><br></pre></td></tr></table></figure>

<p> <strong>5. 报错5</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MatConvNet compiled with <span class="string">'-R2018a'</span> and linked with <span class="string">'-R2017b'</span></span><br></pre></td></tr></table></figure>
<p>解决方法：把 {MatConvNet路径}/matlab/vl_compilenn.m 第620行附近改成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">args = horzcat(&#123;<span class="string">'-outdir'</span>, mex_dir&#125;, ...</span><br><span class="line">flags.base, flags.mexlink, ...</span><br><span class="line"><span class="string">'-R2018a'</span>,...//新增</span><br><span class="line">&#123;[<span class="string">'LDFLAGS=$LDFLAGS '</span> strjoin(flags.mexlink_ldflags)]&#125;, ...</span><br><span class="line">&#123;[<span class="string">'LDOPTIMFLAGS=$LDOPTIMFLAGS '</span> strjoin(flags.mexlink_ldoptimflags)]&#125;, ...</span><br><span class="line">&#123;[<span class="string">'LINKLIBS='</span> strjoin(flags.mexlink_linklibs) <span class="string">' $LINKLIBS'</span>]&#125;, ...</span><br><span class="line">objs) ;</span><br></pre></td></tr></table></figure>
<p>同时把第359行附近改成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flags.mexlink = &#123;<span class="string">'-lmwblas'</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>即可解决。</p>
<p><strong>至此，使用Matlab编译安装MatConvnet的流程及在这个过程中遇到的问题和解决方法总结如上所示，请各位小伙伴认真对照修改，一定可以解决！如有问题请在评论区留言，我会及时回复！</strong></p>
]]></content>
  </entry>
  <entry>
    <title>LaTeX-TeXlive和TeXstudio的下载、安装配置及使用</title>
    <url>/2020/05/12/LaTeX-TeXlive%E5%92%8CTeXstudio%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><strong>一、LaTeX介绍</strong></p>
<p>LaTeX，是一种基于TeX的排版系统，由美国电脑学家莱斯利·兰伯特在20世纪80年代初期开发，利用这种格式，用户能在几天，甚至几小时内生成很多具有书籍质量的印刷品。因此它非常适用于生成高印刷质量的科技和数学类文档。<br><strong>LaTeX的使用主要需要安装两个东西：</strong></p>
<ol>
<li>根据平台选择一个TeX发行版进行安装，建议选择最全功能最多的版本。TeX发行版的概念相当于Linux及其发行版，Linux内核虽然只有一个，但是有很多基于内核的不同特色的Linux发行版，比如Ubuntu，Fedora等等不胜枚举。这里我们选择TeXlive。</li>
<li>选择一个合适的LaTex编辑器。在安装好LaTeX环境以后，通常都会有一个自带的编辑器，比如CTex的WinEdt，MacTeX的TeXShop，不过功能并不强大，好比 Windows 记事本，只有一些基本的文本编辑功能。这里我们选择比较强大的TeXstudio。</li>
</ol>
<p><strong>二、TeXlive</strong></p>
<p> <strong>1. 下载</strong><br>推荐下载离线安装包，然后安装的方式。可以使用官方的镜像下载，也可以利用国内的镜像下载。官方下载网址: <a href="http://www.tug.org/texlive/" target="_blank" rel="noopener">http://www.tug.org/texlive/</a><br>进入官网后，按以下操作进行：<br><img src="https://img-blog.csdnimg.cn/20200407113720505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200407113843733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200407113818579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200407113935159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后选择texlive2019.iso点击进行下载。官网下载比较慢，我们可以利用国内的镜像网站来下载，这样下载速度快。清华大学镜像文件：<a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/</a><br><img src="https://img-blog.csdnimg.cn/20200407114040252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> <strong>2. 安装</strong><br>将texlive2019.iso 文件解压，然后<strong>右键“以管理员身份运行”打开</strong>其中的install-tl-advanced.bat文件。<br><img src="https://img-blog.csdnimg.cn/20200407114344490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击Advanced。<br><img src="https://img-blog.csdnimg.cn/20200407114408627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后依次按下图操作，修改安装目录，点击安装。<br><img src="https://img-blog.csdnimg.cn/2020040711451044.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装完成（用时55分钟）。<br><img src="https://img-blog.csdnimg.cn/2020040711461364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>验证是否安装成功，打开cmd，输入tex -version，如果出现版本号即说明安装成功。<br><img src="https://img-blog.csdnimg.cn/20200407114909605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>接下来就是安装LaTeX的编辑器，我们选用TeXstudio。</p>
<p> <strong>三、TeXstudio</strong></p>
<p> <strong>1. 下载及安装</strong><br> 直接去官网下载（需要科学上网）。官网地址：<a href="https://www.texstudio.org/" target="_blank" rel="noopener">https://www.texstudio.org/</a><br> 不需要科学上网。地址：<a href="http://texstudio.sourceforge.net/" target="_blank" rel="noopener">http://texstudio.sourceforge.net/</a><br>下载后直接点击安装，一样选择安装路径，然后进行一些简单的设置。这里我下载的安装程序为“texstudio-2.12.22-win-qt5.exe”。</p>
<p> <strong>2. 配置</strong></p>
<ul>
<li>依次找到Options→Configure TeXstudio→Commands，指定Commands命令的执行程序，将BibTeX、BibTeX 8-Bit、Biber的路径设置为TeXlive安装路径下对应EXE文件。<br><img src="https://img-blog.csdnimg.cn/20200407120403549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
<li>设置中文界面：安装结束后，一开始的打开界面是英文的，这里我们可以切换成中文。<br>依次点击：Options→Configure Texstudio→General→Language→zh_CN<br><img src="https://img-blog.csdnimg.cn/20200407120542695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
<li>添加行号：添加段落行号，这样可以很方便查看段落的某句话所在的位置，尤其是在运行报错时，有行号就非常方便查看错误的位置了。<br>依次点击：选项→设置Texstudio→显示高级选项→编辑器→显示行号→所有行号<br><img src="https://img-blog.csdnimg.cn/20200407120651367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
<li>设置编译器与编码：为了正常的输出中文，我们需要把默认编译器改成xelatex，utf-8编码。如果是为了编写英文论文，要用“pdflatex”。<br><img src="https://img-blog.csdnimg.cn/20200407121052151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>3.测试</strong><br>输入下述代码，运行，得到下述结果即代表安装配置成功。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\documentclass[11pt]&#123;ctexart&#125;  </span><br><span class="line">\usepackage[top&#x3D;2cm, bottom&#x3D;2cm, left&#x3D;2cm, right&#x3D;2cm]&#123;geometry&#125;  </span><br><span class="line">\usepackage&#123;algorithm&#125;  </span><br><span class="line">\usepackage&#123;algorithmicx&#125;  </span><br><span class="line">\usepackage&#123;algpseudocode&#125;  </span><br><span class="line">\usepackage&#123;amsmath&#125;  </span><br><span class="line"> </span><br><span class="line">\floatname&#123;algorithm&#125;&#123;算法&#125;  </span><br><span class="line">\renewcommand&#123;\algorithmicrequire&#125;&#123;\textbf&#123;输入:&#125;&#125;  </span><br><span class="line">\renewcommand&#123;\algorithmicensure&#125;&#123;\textbf&#123;输出:&#125;&#125;  </span><br><span class="line"> </span><br><span class="line">\begin&#123;document&#125;  </span><br><span class="line">	\begin&#123;algorithm&#125;  </span><br><span class="line">		\caption&#123;用归并排序求逆序数&#125;  </span><br><span class="line">		\begin&#123;algorithmic&#125;[1] %每行显示行号  </span><br><span class="line">			\Require $Array$数组，$n$数组大小  </span><br><span class="line">			\Ensure 逆序数  </span><br><span class="line">			\Function &#123;MergerSort&#125;&#123;$Array, left, right$&#125;  </span><br><span class="line">			\State $result \gets 0$  </span><br><span class="line">			\If &#123;$left &lt; right$&#125;  </span><br><span class="line">			\State $middle \gets (left + right) &#x2F; 2$  </span><br><span class="line">			\State $result \gets result +$ \Call&#123;MergerSort&#125;&#123;$Array, left, middle$&#125;  </span><br><span class="line">			\State $result \gets result +$ \Call&#123;MergerSort&#125;&#123;$Array, middle, right$&#125;  </span><br><span class="line">			\State $result \gets result +$ \Call&#123;Merger&#125;&#123;$Array,left,middle,right$&#125;  </span><br><span class="line">			\EndIf  </span><br><span class="line">			\State \Return&#123;$result$&#125;  </span><br><span class="line">			\EndFunction  </span><br><span class="line">			\State  </span><br><span class="line">			\Function&#123;Merger&#125;&#123;$Array, left, middle, right$&#125;  </span><br><span class="line">			\State $i\gets left$  </span><br><span class="line">			\State $j\gets middle$  </span><br><span class="line">			\State $k\gets 0$  </span><br><span class="line">			\State $result \gets 0$  </span><br><span class="line">			\While&#123;$i&lt;middle$ \textbf&#123;and&#125; $j&lt;right$&#125;  </span><br><span class="line">			\If&#123;$Array[i]&lt;Array[j]$&#125;  </span><br><span class="line">			\State $B[k++]\gets Array[i++]$  </span><br><span class="line">			\Else  </span><br><span class="line">			\State $B[k++] \gets Array[j++]$  </span><br><span class="line">			\State $result \gets result + (middle - i)$  </span><br><span class="line">			\EndIf  </span><br><span class="line">			\EndWhile  </span><br><span class="line">			\While&#123;$i&lt;middle$&#125;  </span><br><span class="line">			\State $B[k++] \gets Array[i++]$  </span><br><span class="line">			\EndWhile  </span><br><span class="line">			\While&#123;$j&lt;right$&#125;  </span><br><span class="line">			\State $B[k++] \gets Array[j++]$  </span><br><span class="line">			\EndWhile  </span><br><span class="line">			\For&#123;$i &#x3D; 0 \to k-1$&#125;  </span><br><span class="line">			\State $Array[left + i] \gets B[i]$  </span><br><span class="line">			\EndFor  </span><br><span class="line">			\State \Return&#123;$result$&#125;  </span><br><span class="line">			\EndFunction  </span><br><span class="line">		\end&#123;algorithmic&#125;  </span><br><span class="line">	\end&#123;algorithm&#125;  </span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>
<img src="https://img-blog.csdnimg.cn/20200407124207109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>至此，TeXlive和TeXstudio的下载、安装配置及使用已经全部完成，各位小伙伴如果在安装配置过程中出现问题欢迎在评论区留言，我会及时回复。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Pytorch中torchvision.datasets.ImageFolder报错：Found 0 files in subfolders of_XXX，完美解决！</title>
    <url>/2020/05/12/Pytorch%E4%B8%ADtorchvision.datasets.ImageFolder%E6%8A%A5%E9%94%99%EF%BC%9AFound%200%20files%20in%20subfolders%20of_XXX%EF%BC%8C%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3%EF%BC%81/</url>
    <content><![CDATA[<p><strong>1.报错如下：</strong></p>
<p>RuntimeError: Found 0 files in subfolders of:XXX<br>Supported extensions are: .jpg,.jpeg,.png,.ppm,.bmp,.pgm,.tif,.tiff,webp</p>
<p><strong>这个错误一般发生在调用torchvision.datasets.ImageFolder训练模型读取数据时，主要原因是数据存储路径与数据读取路径不一致。</strong></p>
<p><strong>2.解决方法：</strong></p>
<p>如在使用神经网络模型处理猫狗数据集时，此时的数据集为大量的猫狗图片，且数据集存储路径为:”/文件夹/Dog.0.jpg”或”/文件夹/Cat.1.jpg”，则此时的数据读取路径应该为:”/文件夹”。否则将会报错。</p>
<p><strong>3.总结</strong></p>
<p>在平时进行实验时，虽然说对数据集的读取方面可能不会有太多问题，但是还是要认真细致一点，避免出现不必要的问题，这样也能提高工作的效率。</p>
]]></content>
  </entry>
  <entry>
    <title>六六和文文</title>
    <url>/2020/05/12/My-New-Post/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>cFosSpeed简介、下载安装、注册及配置教程</title>
    <url>/2020/05/12/cFosSpeed%E7%AE%80%E4%BB%8B%E3%80%81%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E3%80%81%E6%B3%A8%E5%86%8C%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>一、cFosSpeed是什么？</strong><br>cFosSpeed软件是Windows操作系统下的一款重要的网络工具软件，其特别的通信流量调整功能可以保证网络在上传下载工作时均保持满速高速的运行状态，可对已有网络带宽的利用发挥到极致。</p>
<p><strong>二、为什么要用cFosSpeed？</strong><br>经常会有小伙伴觉得自己装的宽带并不小，但是在上网时总是觉得电脑网速太差，然后开始埋怨运营商是不是给虚标宽带了。可是要知道，决定网速的快慢有太多种环节，假设说你装了200兆的宽带，并不代表着你就能用上200兆的宽带。你的路由器、网线、网卡也必须得支持千兆连接才能保证你的电脑用上满血的宽带。用“木桶理论”就很好解释，网络的速度是由最短的那块木板决定的。所以，同样道理，就算你的电脑可以跑满200兆带宽，但是当你下载某盘文件的时候，由于远程服务器限制你的下载速度，所以这时候，某度网盘就成了最短的那块木板。就算你千兆宽带也得跪。所以，当你觉得网速差，会有很多种原因，并不一定百分百就是运营商的锅。<br>不过我们可以做的就是，尽量优化网络连接，充分压榨带宽速度。比如说，当你在满速下载电影时，这时候去上网，那浏览器加载网页时肯定会慢一点，更不用说再去玩游戏了。如果你想同时全都要：<strong>既想要稳定的下载速度，又不影响网页加载速度，还想痛快的玩游戏。</strong><br>这时候你就需要一款优秀的网络优化加速器了，它就是cFosSpeed，这是一款全球著名的网络加速工具。据介绍，它可以帮助你在疯狂下载的同时，也能保证相对流畅的阅读网页体验以及在线游戏。这对于我国大面积使用的不对称线路，有非常好的效果。当然，你也得明白，软件的作用是有限的，不可能说你家100兆宽带，用上这个软件，噌！变成200兆了，那是在做梦。</p>
<p><strong>三、cFosSpeed原理</strong><br>根据官网介绍的原理：<br>没有 cFosSpeed 时：数据需要被确认接收（ACK）之后新数据才能发送。<br><img src="https://img-blog.csdnimg.cn/20200414134607390.gif#pic_center" alt="在这里插入图片描述"><br>开启 cFosSpeed 时：数据接收确认（ACK）在上传时被划定优先级，从而允许下载以最大速度进行。<br><img src="https://img-blog.csdnimg.cn/20200414134622629.gif#pic_center" alt="在这里插入图片描述"><br>原理简单说就像是宽带中的交通警察，虽然不能拓宽道路，但是可以有效指挥交通让其不堵车，更加流畅。<br>只是 cFosSpeed 用起来并不是免费的，但是也不算贵，它在官网售价是 45.9 元，有效期呢，则是终身，比较良心了。<br><img src="https://img-blog.csdnimg.cn/20200414134925236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然而更良心的还在这里，cFosSpeed为最近受疫情影响的人们提供了免费终身许可证，在4月20日之前都可以免费领取。<br><strong>官网：<a href="https://www.cfos.de" target="_blank" rel="noopener">https://www.cfos.de</a></strong></p>
<p><strong>四、下载安装cFosSpeed</strong><br>在官网下载安装。</p>
<p><strong>五、免费注册cFosSpeed</strong><br>只要输入自己的电子邮箱就能领取，不过建议大家不要使用QQ邮箱，我使用的是163邮箱。当天就收到了注册邮件，里面包含注册码和激活文件。在官网的左上方就就能找到这个免费领取的入口。<img src="https://img-blog.csdnimg.cn/20200414135227449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>可以看到，有一封邮件里面有激活码和一个附件就是激活文件。<br><img src="https://img-blog.csdnimg.cn/20200414135506306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>先安装cFosSpeed，在官网有下载地址，然后下载邮箱附件中的激活文件并双击打开，最后输入激活码。<br><img src="https://img-blog.csdnimg.cn/20200414135738751.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入之后会显示注册完成，说明已经成功了。<br><img src="https://img-blog.csdnimg.cn/2020041413581420.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装注册了cFosSpeed之后还没完事，还要设置一下，这是软件使用的难点部分，我也是一边搜教程一遍摸索，下面是我参考了一些教程之后的流程。</p>
<p><strong>六、配置cFosSpeed</strong><br>怎么校准呢？<br>软件常规的使用方法，在cFosSpeed网站中有教程，在任务栏cFosSpeed图标上点击右键有一个速度向导，点击即可进入官方的教程链接，大家可以参照着速度向导的方法去设置。<br><img src="https://img-blog.csdnimg.cn/20200414140115703.jpg#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200414140157477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>主要步骤为：</strong></p>
<p> <strong>1. 首先右键点击右下角 cFosSpeed 图标，选择流量调整-线路校准。</strong><br><img src="https://img-blog.csdnimg.cn/20200414140247494.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>会出现以下提示，点击是并继续。</strong><br><img src="https://img-blog.csdnimg.cn/20200414140312518.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> <strong>2. 直到cFosSpeed的悬浮状态栏上显示没有或者几乎没有流量动静时为止（大约需要2-3分钟），这时候右键点击cFosSpeed图标，依次进入选项-设置：</strong><br><img src="https://img-blog.csdnimg.cn/20200414140417514.jpg#pic_center" alt="在这里插入图片描述"><br><strong>在打开的网页中，选择左侧适配器信息。查看右侧的Calibration Done（校准度）的百分比。如果是 Perfect 说明就校准完成。但一般情况下是 0（Poor）的几率比较大，所以接下来还要进行下一步操作。</strong><br><img src="https://img-blog.csdnimg.cn/20200414140457489.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>那就是尽量想办法跑满你的带宽。网上一些教程给出的是通过访问speedtest.cn或者speedtest.net这两个网站测速，但根据我的测试，这两个网站打开速度较慢，我使用的是Speedtest by Ookla-1.0.9.3浏览器插件，速度很快。插件网址：<a href="https://www.speedtest.net/apps/chrome" target="_blank" rel="noopener">https://www.speedtest.net/apps/chrome</a></strong><br><img src="https://img-blog.csdnimg.cn/20200414140816216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>测速的目的就是尽可能上探带宽的上限，告诉软件，你看，我家的宽带最快能有这么快，你可得按这个给我可劲儿跑。</strong></p>
<p> <strong>3. 测完之后就回到设置页面的适配器信息刷新一下，查看Calibration Done百分比。如果涨到了Perfect就可以停止测速了，校准就完成了。如果以后遇到Calibration Done百分比下降的情况，打开插件再测几次速就能又恢复到Perfect。</strong><br><img src="https://img-blog.csdnimg.cn/20200414141237237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>总之，就是尽可能反复跑满带宽来提高校准度，从而获得更合理的带宽分配流量。</strong></p>
<p> <strong>4. 如果你反复测试还是无法提高校准度的话，那就得手动打开控制台配置参数了，选择流量调整-打开 cFosSpeed 控制台。</strong><br><img src="https://img-blog.csdnimg.cn/20200414141334683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 5. 官网给出了详细的配置教程，感兴趣的同学可以自己摸索。<br><strong>链接：<a href="http://www.cfosspeed.de/zh-cn/traffic-shaping/speed-guide.htm" target="_blank" rel="noopener">http://www.cfosspeed.de/zh-cn/traffic-shaping/speed-guide.htm</a></strong><br><strong>按照我自己测试的情况来看，基本上只要你可以测出正常数值，反复多重复几次，基本就可以提高校准度。校准完成后，找一个可以满速下载的文件做测试，看看ping值是否还是保持很低。</strong><br><img src="https://img-blog.csdnimg.cn/20200414141548849.png#pic_center" alt="在这里插入图片描述"><br>上面这个截图就是我在优化之后，在满速下载的网络状态，那个白色数字2就是ping值，ping值越小则说明延迟越小，从数值可见，这个优化效果相当不错。</p>
<p><strong>七、总结</strong><br>说实话，这个软件我也是按照官网的说明，同时结合cFosSpeed贴吧的教程慢慢摸索的，全部功能还没有完全摸透。不过由于<strong>免费注册的截止时间目前为2020年4月20日</strong>，发邮件申请也需要时间，为了不影响大家及时领取，就赶紧把软件介绍出来，建议大家先领了正版然后再慢慢摸索。根据我实际使用效果测试，网络环境确实有改善，所以还是值得折腾的。</p>
]]></content>
  </entry>
  <entry>
    <title>TensorLy-神经网络张量库</title>
    <url>/2020/05/12/TensorLy-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%BC%A0%E9%87%8F%E5%BA%93/</url>
    <content><![CDATA[<p><strong>TensorLy-神经网络张量库</strong></p>
<p><strong>1.简介</strong><br>        TensorLy是一个Python库，旨在使张量学习变得简单易用。 它允许轻松执行张量分解，张量学习和张量代数。 其后端系统允许使用NumPy，MXNet，PyTorch，TensorFlow或CuPy无缝执行计算，并在CPU或GPU上大规模运行方法。</p>
<p><strong>2.相关链接</strong></p>
<ul>
<li><p>Website：<a href="http://tensorly.org" target="_blank" rel="noopener">http://tensorly.org</a>  </p>
</li>
<li><p>Source-code：<a href="https://github.com/tensorly/tensorly" target="_blank" rel="noopener">https://github.com/tensorly/tensorly</a></p>
</li>
<li><p>Jupyter Notebooks：<a href="https://github.com/JeanKossaifi/tensorly-notebooks" target="_blank" rel="noopener">https://github.com/JeanKossaifi/tensorly-notebooks</a></p>
</li>
</ul>
<p><strong>3.安装TensorLy</strong><br>        唯一的前提条件是必须安装Python 3。最简单的方法是通过Anaconda安装。<br>| With pip (recommended) | With conda |<br>|-pip install -U tensorly-|-conda install -c tensorly tensorly-|<br>注意：TensorLy默认情况下取决于NumPy。如果要使用MXNet或PyTorch后端，则需要单独安装这些软件包。</p>
]]></content>
  </entry>
  <entry>
    <title>import torch报错：from torch._C import _ ImportError_ DLL load failed_ 找不到指定的程序，完美解决！</title>
    <url>/2020/05/12/import%20torch%E6%8A%A5%E9%94%99%EF%BC%9Afrom%20torch._C%20import%20_%20ImportError_%20DLL%20load%20failed_%20%E6%89%BE%E4%B8%8D%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9A%84%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3%EF%BC%81/</url>
    <content><![CDATA[<h2 id="import-torch报错：from-torch-C-import-ImportError-DLL-load-failed-找不到指定的程序，完美解决！"><a href="#import-torch报错：from-torch-C-import-ImportError-DLL-load-failed-找不到指定的程序，完美解决！" class="headerlink" title="import torch报错：from torch._C import * ImportError: DLL load failed: 找不到指定的程序，完美解决！"></a><strong>import torch报错：from torch._C import * ImportError: DLL load failed: 找不到指定的程序，完美解决！</strong></h2><p> <strong>1. 问题描述</strong><br>        昨天刚收到新买的笔记本电脑，就迫不及待的着手安装Pytorch。首先安装了Ananconda一切顺利，但是当我用conda命令安装完pytorch，在命令行输入”import torch”后发现报错，错误提示为：“import torch报错：from torch._C import * ImportError: DLL load failed: 找不到指定的程序”。</p>
<p> <strong>2. 解决方法</strong><br>        查阅了一些资料后发现是Anaconda下pytorch虚拟环境中python版本的问题，我安装的pytorch版本为1.2.0，而python版本为3.0.0（使用conda命令创建虚拟环境时默认的python版本）。于是我使用conda命令：“conda install python”（会根据自己的环境配置自动选择对应版本）将python版本更新为python=3.6.10，成功解决问题。</p>
<p><strong>3.截图</strong><br><img src="https://img-blog.csdnimg.cn/20200331171141129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="python和pytorch版本"><br><img src="https://img-blog.csdnimg.cn/20200331171315581.png#pic_center" alt="import torch成功执行"><br>        问题完美解决！</p>
<p><strong>4.总结</strong><br>        类似于上述问题的问题有很多，这个时候就要考虑一下是不是因为各个包之间版本不匹配的问题，有时就能很快解决问题！</p>
<p><strong>这是我在CSDN上写的第一篇博客，欢迎大家批评指正，多多关注！</strong></p>
]]></content>
  </entry>
  <entry>
    <title>scikit-learn朴素贝叶斯类库使用经验分享</title>
    <url>/2020/05/12/scikit-learn%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%B1%BB%E5%BA%93%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<p><strong>本文重点讲述scikit-learn朴素贝叶斯类库的使用要点和参数选择。</strong><br><strong>1.scikit-learn 朴素贝叶斯类库</strong><br>朴素贝叶斯是一类比较简单的算法，scikit-learn中朴素贝叶斯类库的使用也比较简单。相对于决策树，KNN之类的算法，朴素贝叶斯需要关注的参数是比较少的，这样也比较容易掌握。在scikit-learn中，一共有3个朴素贝叶斯的分类算法类。分别是GaussianNB，MultinomialNB和BernoulliNB。其中GaussianNB就是先验为高斯分布的朴素贝叶斯，MultinomialNB就是先验为多项式分布的朴素贝叶斯，而BernoulliNB就是先验为伯努利分布的朴素贝叶斯。这三个类适用的分类场景各不相同，一般来说，如果样本特征的分布大部分是连续值，使用GaussianNB会比较好。如果样本特征的分布大部分是多元离散值，使用MultinomialNB比较合适。而如果样本特征是二元离散值或者很稀疏的多元离散值，应该使用BernoulliNB。</p>
<p><strong>2.GaussianNB</strong><br>GaussianNB假设特征的先验概率为正态分布，即如下式：<br> <img src="https://img-blog.csdnimg.cn/20200423123851596.png#pic_center" alt="在这里插入图片描述">其中Ck为Y的第k类类别。μk和σ2k为需要从训练集估计的值。<br>GaussianNB会根据训练集求出μk和σ2k。μk为在样本类别Ck中，所有Xj的平均值。σ2k为在样本类别Ck中，所有Xj的方差。<br>GaussianNB类的主要参数仅有一个，即先验概率priors ，对应Y的各个类别的先验概率P(Y=Ck)。这个值默认不给出，如果不给出此时P(Y=Ck)=mk/m。其中m为训练集样本总数量，mk为输出为第k类别的训练集样本数。如果给出的话就以priors 为准。<br>在使用GaussianNB的fit方法拟合数据后，我们可以进行预测。此时预测有三种方法，包括predict，predict_log_proba和predict_proba。<br>predict方法就是我们最常用的预测方法，直接给出测试集的预测类别输出。<br>predict_proba则不同，它会给出测试集样本在各个类别上预测的概率。容易理解，predict_proba预测出的各个类别概率里的最大值对应的类别，也就是predict方法得到类别。<br>predict_log_proba和predict_proba类似，它会给出测试集样本在各个类别上预测的概率的一个对数转化。转化后predict_log_proba预测出的各个类别对数概率里的最大值对应的类别，也就是predict方法得到类别。<br>此外，GaussianNB一个重要的功能是有 partial_fit方法，这个方法的一般用在如果训练集数据量非常大，一次不能全部载入内存的时候。这时我们可以把训练集分成若干等份，重复调用partial_fit来一步步的学习训练集，非常方便。后面介绍的MultinomialNB和BernoulliNB也有类似的功能。</p>
<p><strong>3.MultinomialNB</strong><br>MultinomialNB假设特征的先验概率为多项式分布，即如下式：<br><img src="https://img-blog.csdnimg.cn/20200423123941228.png#pic_center" alt="在这里插入图片描述">)其中，P(Xj=xjl|Y=Ck)是第k个类别的第j维特征的第l个取值条件概率。mk是训练集中输出为第k类的样本个数。λ 为一个大于0的常数，常常取为1，即拉普拉斯平滑。也可以取其他值。<br>MultinomialNB的参数比GaussianNB多，但是一共也仅仅只有3个。其中，参数alpha即为上面的常数λ，如果你没有特别的需要，用默认的1即可。如果发现拟合的不好，需要调优时，可以选择稍大于1或者稍小于1的数。布尔参数fit_prior表示是否要考虑先验概率，如果是false,则所有的样本类别输出都有相同的类别先验概率。否则可以自己用第三个参数class_prior输入先验概率，或者不输入第三个参数class_prior让MultinomialNB自己从训练集样本来计算先验概率，此时的先验概率为P(Y=Ck)=mk/m。其中m为训练集样本总数量，mk为输出为第k类别的训练集样本数。总结如下：<br><img src="https://img-blog.csdnimg.cn/20200423124259769.png#pic_center" alt="在这里插入图片描述">在使用MultinomialNB的fit方法或者partial_fit方法拟合数据后，我们可以进行预测。此时预测有三种方法，包括predict，predict_log_proba和predict_proba。由于方法和GaussianNB完全一样，这里就不累述了。　</p>
<p><strong>4.BernoulliNB</strong><br>BernoulliNB假设特征的先验概率为二元伯努利分布，即如下式：<br><img src="https://img-blog.csdnimg.cn/20200423124411818.png#pic_center" alt="在这里插入图片描述">此时l只有两种取值。xjl只能取值0或者1。<br>BernoulliNB一共有4个参数，其中3个参数的名字和意义与MultinomialNB完全相同。唯一增加的一个参数是binarize。这个参数主要是用来帮助BernoulliNB处理二项分布，可以是数值或者不输入。如果不输入，则BernoulliNB认为每个数据特征都已经是二元的。否则的话，小于binarize的会归为一类，大于binarize的会归为另外一类。<br>在使用BernoulliNB的fit或者partial_fit方法拟合数据后，我们可以进行预测。此时预测有三种方法，包括predict，predict_log_proba和predict_proba。由于方法和GaussianNB完全一样，这里就不累述了。</p>
<p><strong>以上就是scikit-learn朴素贝叶斯类库的使用经验总结。希望可以帮到各位小伙伴们。</strong></p>
]]></content>
  </entry>
  <entry>
    <title>sklearn-SVM：数据归一化及模型调参</title>
    <url>/2020/05/12/sklearn-SVM%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BD%92%E4%B8%80%E5%8C%96%E5%8F%8A%E6%A8%A1%E5%9E%8B%E8%B0%83%E5%8F%82/</url>
    <content><![CDATA[<p><strong>1.基本环境</strong><br>编译器：PyCharm 2019.1.2<br>虚拟环境：Anaconda虚拟环境<br>scikit-learn版本: 0.22.2.post1</p>
<p><strong>2.数据归一化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler  <span class="comment"># 归一化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化操作</span></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">x_train_data = scaler.fit_transform(x_train_data)</span><br><span class="line">x_test_data = scaler.transform(x_test_data)</span><br></pre></td></tr></table></figure>

<p><strong>3.模型调参</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV  <span class="comment"># 在sklearn中主要是使用GridSearchCV调参</span></span><br><span class="line"></span><br><span class="line">svc_model = svm.SVC(kernel=<span class="string">'rbf'</span>)</span><br><span class="line">param_grid = &#123;<span class="string">'C'</span>: [<span class="number">1e-3</span>, <span class="number">1e-2</span>, <span class="number">1e-1</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>], <span class="string">'gamma'</span>: [<span class="number">0.001</span>, <span class="number">0.0001</span>]&#125;  <span class="comment"># param_grid:我们要调参数的列表(带有参数名称作为键的字典)，此处共有14种超参数的组合来进行网格搜索，进而选择一个拟合分数最好的超平面系数。</span></span><br><span class="line">grid_search = GridSearchCV(svc_model, param_grid, n_jobs=<span class="number">8</span>, verbose=<span class="number">1</span>)  <span class="comment"># n_jobs:并行数，int类型。(-1：跟CPU核数一致；1:默认值)；verbose:日志冗长度。默认为0：不输出训练过程；1：偶尔输出；&gt;1：对每个子模型都输出。</span></span><br><span class="line">grid_search.fit(x_train_data, y_train_data.ravel())  <span class="comment"># 训练，默认使用5折交叉验证</span></span><br><span class="line">best_parameters = grid_search.best_estimator_.get_params()  <span class="comment"># 获取最佳模型中的最佳参数</span></span><br><span class="line">print(<span class="string">"cv results are"</span> % grid_search.best_params_, grid_search.cv_results_)  <span class="comment"># grid_search.cv_results_:给出不同参数情况下的评价结果。</span></span><br><span class="line">print(<span class="string">"best parameters are"</span> % grid_search.best_params_, grid_search.best_params_)  <span class="comment"># grid_search.best_params_:已取得最佳结果的参数的组合；</span></span><br><span class="line">print(<span class="string">"best score are"</span> % grid_search.best_params_, grid_search.best_score_)  <span class="comment"># grid_search.best_score_:优化过程期间观察到的最好的评分。</span></span><br><span class="line"><span class="comment"># for para, val in list(best_parameters.items()):</span></span><br><span class="line"><span class="comment">#     print(para, val)</span></span><br><span class="line">svm_model = svm.SVC(kernel=<span class="string">'rbf'</span>, C=best_parameters[<span class="string">'C'</span>], gamma=best_parameters[<span class="string">'gamma'</span>])  <span class="comment"># 最佳模型</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>visdom安装及报错解决方案</title>
    <url>/2020/05/12/visdom%E5%AE%89%E8%A3%85%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p><strong>一、安装</strong> </p>
<p><strong>1.使用conda命令安装</strong><br>        在命令行执行”conda install visdom”命令即可完成下载及安装（自动选择适合系统的版本）。</p>
<p><strong>2.检查安装是否成功</strong><br>        在命令行执行”python -m visdom.server”命令即可启动visdom服务，若安装成功则点击命令行出现的链接即可跳转到浏览器窗口，显示窗体等相关组件则正确完成安装。</p>
<p><strong>二、报错解决方案</strong></p>
<p><strong>1.报错提示：缺少相关包文件</strong><br>        在命令行执行”conda install XXX”命令安装对应的包文件，然后重新执行”python -m visdom.server”即可解决。</p>
<p><strong>2.浏览器窗口蓝屏，无法显示窗体等相关组件。</strong><br>        这个错误产生的原因是由于visdom服务在首次启动时需要联网（包括外网）下载一些运行所需的文件，如js、css、fonts等。虽然说新版本（0.1.8.9+）已经解决了无法下载的问题，但是还存在下载速度慢、防火墙限制等问题，因此下载过程十分漫长还极易出错，因此本人在此分享visdom服务所需的相关文件，请有需要的童鞋下载并覆盖。<br>        本人visdom/static文件夹路径为：”D:\Software\Anaconda\Anaconda3\envs\pytorch\Lib\site-packages\visdom\static”，请对照自行修改路径进行覆盖。<br>        static文件夹下所包括的文件及文件夹结构如下图：<br>        <img src="https://img-blog.csdnimg.cn/20200401120724663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="static文件夹"><br>        <img src="https://img-blog.csdnimg.cn/20200401120748397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="css文件夹"><br>        <img src="https://img-blog.csdnimg.cn/20200401120803816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="fonts文件夹"><br>        <img src="https://img-blog.csdnimg.cn/20200401120817433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="js文件夹"></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>一步步带你免费使用Tesla K80 GPU！</title>
    <url>/2020/05/12/%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%B8%A6%E4%BD%A0%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8Tesla%20K80%20GPU%EF%BC%81/</url>
    <content><![CDATA[<p>Colaboratory免费GPU试用指南，现在我们来一起看一下吧。<br><a href="https://colab.research.google.com/notebook" target="_blank" rel="noopener">地址</a></p>
<p> <strong>1. 在Google Drive上创建文件夹</strong><br>Colab用的数据都存储在Google Drive云端硬盘上，所以，我们需要先指定在Google Drive上要用的文件夹。比如说，可以在Google Drive上新建一个“app”文件夹，或者其他什么名字，也可以选择Colab笔记本默认的文件夹。<br><img src="https://img-blog.csdnimg.cn/20200509152123670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> <strong>2. 新建Colab笔记本</strong><br>在刚刚创建的app文件夹里点击右键，选择“More/更多”，然后从菜单里选择“Google Colaboratory”，这样就新建出了一个Colab笔记本。如果没有“Google Colaboratory”则需要点击“关联更多应用”添加该插件。之后方可成功新建。<br><img src="https://img-blog.csdnimg.cn/20200509152339623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击笔记本的名字，可以重命名。<br><img src="https://img-blog.csdnimg.cn/20200509152553490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> <strong>3. 设置免费GPU</strong><br>这一步，要改变笔记本所用的默认硬件。在笔记本里点Edit&gt;Notebook settings（修改&gt;笔记本设置），或者Runtime&gt;Change runtime type（运行时&gt;改变运行时类型），然后在Hardware accelerator（硬件加速器）一栏选择GPU。<br><img src="https://img-blog.csdnimg.cn/20200509153111796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200509153217725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后点击保存，Google Colab就可以用了。</p>
<p> <strong>4. 用Colab运行基本Python代码</strong><br> 我们来运行一些Python Numpy教程里的基本数据类型代码。<br> <img src="https://img-blog.csdnimg.cn/20200509153324742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">)更多代码参考斯坦福大学卷积神经网络与视觉识别课程(CS231n)的Python Numpy教程，<a href="http://cs231n.github.io/python-numpy-tutorial/" target="_blank" rel="noopener">地址</a>。运行结果如你所料。</p>
<p> <strong>5. 用Colab运行.py文件</strong><br> 先运行下面这些代码，来安装必要的库、执行授权。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">!apt-get <span class="keyword">install</span> -y -qq software-properties-common python-software-properties <span class="keyword">module</span>-init-tools</span><br><span class="line">!<span class="keyword">add</span>-apt-repository -y ppa:alessandro-strada/ppa <span class="number">2</span>&gt;&amp;<span class="number">1</span> &gt; /dev/<span class="literal">null</span></span><br><span class="line">!apt-<span class="keyword">get</span> <span class="keyword">update</span> -qq <span class="number">2</span>&gt;&amp;<span class="number">1</span> &gt; /dev/<span class="literal">null</span></span><br><span class="line">!apt-<span class="keyword">get</span> -y <span class="keyword">install</span> -qq google-drive-ocamlfuse fuse</span><br><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> auth</span><br><span class="line">auth.authenticate_user()</span><br><span class="line"><span class="keyword">from</span> oauth2client.client <span class="keyword">import</span> GoogleCredentials</span><br><span class="line">creds = GoogleCredentials.get_application_default()</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line">!google-drive-ocamlfuse -headless -<span class="keyword">id</span>=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125; &lt; /dev/<span class="literal">null</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | grep <span class="keyword">URL</span></span><br><span class="line">vcode = getpass.getpass()</span><br><span class="line">!echo &#123;vcode&#125; | google-drive-ocamlfuse -headless -<span class="keyword">id</span>=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125;</span><br></pre></td></tr></table></figure>
<p>运行的时候应该会看到下图所示的结果：<br><img src="https://img-blog.csdnimg.cn/20200509153507825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>看见那个链接之后，点击它，复制验证码并粘贴到文本框里。授权完成后，就可以挂载Google Drive了：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">!mkdir -p drive</span></span><br><span class="line"><span class="addition">!google-drive-ocamlfuse drive</span></span><br></pre></td></tr></table></figure>
<p>安装Keras：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">!pip <span class="keyword">install</span> -q keras</span><br></pre></td></tr></table></figure>
<p>将mnist_cnn.py文件上传到位于Google云端硬盘上的应用文件夹。运行下面的代码，用MNIST数据集训练一个简单的卷积神经网络：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">!python3 drive<span class="regexp">/app/m</span>nist_cnn.py</span><br></pre></td></tr></table></figure>
<p>从结果中可以看到，每个epoch只需要11秒。</p>
<p> <strong>6. 下载泰坦尼克数据集(.csv File)，显示前5行</strong><br> 想按照链接下载.csv文件到app文件夹，只需运行：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">!wget https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/vincentarelbundock/</span>Rdatasets<span class="regexp">/master/</span>csv<span class="regexp">/datasets/</span>Titanic.csv -P drive<span class="regexp">/app</span></span><br></pre></td></tr></table></figure>
<p>也可以直接将.csv文件上传到app文件夹。然后读取app文件夹中的.csv文件，显示前5行：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import pandas <span class="keyword">as</span> pd</span><br><span class="line">titanic = pd.read<span class="constructor">_csv(“<span class="params">drive</span><span class="operator">/</span><span class="params">app</span><span class="operator">/</span>Titanic.<span class="params">csv</span>”)</span></span><br><span class="line">titanic.head(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p> <strong>7. Tips</strong></p>
<p> <strong>- 如何安装库？</strong><br> 安装Keras：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">!pip install -q keras</span><br><span class="line"><span class="keyword">import</span> keras</span><br></pre></td></tr></table></figure>
<p>安装PyTorch：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">!pip install -q <span class="symbol">http:</span>/<span class="regexp">/download.pytorch.org/whl</span><span class="regexp">/cu75/torch</span>-0.<span class="number">2.0</span>.post3-cp27-cp27mu-manylinux1_x86_64.whl torchvision</span><br><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure>
<p>安装OpenCV：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">!apt-get -qq <span class="keyword">install</span> -y libsm6 libxext6 &amp;&amp; pip <span class="keyword">install</span> -q -U opencv-python</span><br><span class="line"><span class="keyword">import</span> cv2</span><br></pre></td></tr></table></figure>
<p>安装XGBoost：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">!pip install -q xgboost==<span class="number">0.4</span>a30</span><br><span class="line"><span class="keyword">import</span> xgboost</span><br></pre></td></tr></table></figure>
<p>安装GraphViz：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">!apt-get -qq <span class="keyword">install</span> -y graphviz &amp;&amp; pip <span class="keyword">install</span> -q pydot</span><br><span class="line"><span class="keyword">import</span> pydot</span><br></pre></td></tr></table></figure>
<p>安装7zip Reader：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">!apt-get -qq <span class="keyword">install</span> -y libarchive-dev &amp;&amp; pip <span class="keyword">install</span> -q -U libarchive</span><br><span class="line"><span class="keyword">import</span> libarchive</span><br></pre></td></tr></table></figure>
<p>安装其他库：<br>用<code>!pip install</code>或者<code>!apt-get install</code>命令。</p>
<p> <strong>- GPU在干活么？</strong><br>要查看你在Colab里是不是真的在用GPU，可以运行以下代码来交叉检查：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="title">tf</span>.test.gpu_device_name()</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200509154319801.png#pic_center" alt="在这里插入图片描述"><br>如果显示上图的结果，就是在用GPU。</p>
<p> <strong>- 我在用哪个GPU？</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">from</span> <span class="selector-tag">tensorflow</span><span class="selector-class">.python</span><span class="selector-class">.client</span> <span class="selector-tag">import</span> <span class="selector-tag">device_lib</span></span><br><span class="line"><span class="selector-tag">device_lib</span><span class="selector-class">.list_local_devices</span>()</span><br></pre></td></tr></table></figure>
<p>其实现在，Colab只提供Tesla K80，所以你会看到下图这样的结果：<br><img src="https://img-blog.csdnimg.cn/20200509154435943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p> <strong>- RAM有多大？</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">!cat /<span class="meta">proc</span>/meminfo</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200509154544694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> <strong>- CPU呢？</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">!cat /<span class="meta">proc</span>/cpuinfo</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020050915463685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>8.总结</strong><br><strong>好好学习，认真薅毛。温馨提示：自备梯子。各位小伙伴快去体验吧！欢迎在评论区留言提问。</strong></p>
]]></content>
  </entry>
  <entry>
    <title>张量化网络论文汇总（2015年-2020年）</title>
    <url>/2020/05/12/%E5%BC%A0%E9%87%8F%E5%8C%96%E7%BD%91%E7%BB%9C%E8%AE%BA%E6%96%87%E6%B1%87%E6%80%BB%EF%BC%882015%E5%B9%B4-2020%E5%B9%B4%EF%BC%89/</url>
    <content><![CDATA[<p><strong>用张量分解的方法压缩神经网络模型这一方向还有哪些坑可以挖呢？这是我研究生以来一直研究的问题。看了很多论文，感觉大体可以分为两条line:</strong></p>
<p><strong>(一)基于低秩近似的张量分解方法</strong><br>也就是对原有的模型参数做低秩张量分解，用分解后得到的因子替换原有的大张量。这一过程后通常还需要一个fine-tune的过程。其中的难点就是怎么从大的张量中保留最有价值的参数留下来，作为一个很好的初始参数值。</p>
<p><strong>(二)张量化网络</strong><br>用张量分解得到的因子重新定义新的网络结构，新的张量计算方法代替原来的卷积操作或全连接层的矩阵运算。这一方法姑且就叫张量化网络吧，下面是该方向的论文汇总，按时间顺序排列。</p>
<p>1.《Tensorizing Neural Networks》(NIPS2015)<br>2.《Ultimate tensorization compressing convolutional and FC layers alike》（NIPS2016 workshop）<br>3.《Compressing recurrent neural network with tensor train 》(IJCNN2017)<br>4.《Tensor-Train Recurrent Neural Networks for Video Classification》(ICML2017)<br>5.《Learning Compact Recurrent Neural Networks with Block-Term Tensor Decomposition》（CVPR2018）<br>6.《Sharing Residual Units Through Collective Tensor Factorization》(IJCAI2018)<br>7.《Tensor Regression Networks》（2018）<br>8.《Tensor Regression Networks with various Low-Rank Tensor Approximations》（2018）<br>9.《Wide Compression：Tensor Ring Nets 》(CVPR2018)<br>10.《Compressing Recurrent Neural Networks with Tensor Ring for Action Recognition》（AAAI2019）<br>11.《Bayesian Tensorized Neural Networks with Automatic Rank Selection》（2019）<br>12.《Robust deep networks with randomized tensor regression layers》（2019）<br>13.《Compressing Deep Neural Networks via AdaptiveDimension Adjustment Tucker Decomposition》（2019）<br>14.《Compression and Interpretability of Deep Neural Networks via Tucker Tensor Layer：From First Principles to Tensor Valued Back-Propagation》（2020）<br>从时间顺序上来看这条line的发展脉络还蛮清晰的</p>
<p>1,2是这个方向的开篇之作，用tensor train分解方法分别重新定义了全连接层和卷积层，都是先将它们reshape成更高维的张量。</p>
<p>3,4都是基于1做的，方法基本相同，只不过扩展到了RNN网络中。</p>
<p>5同样是对RNN网络做压缩，只不过换了一种分解方法block-term分解。</p>
<p>6和之前的思想不是十分相同，它利用了block-term分解后的参数形式对各种resnet残差网络用一个框架表示。tucker分解后的参数可以转化为1<em>1,3</em>3,1*1的卷积层，早在2016年就有。而block-term分解是tucker分解的一种泛化形式，可以看做多个tucker的集成。</p>
<p>7,8是一组，它们针对的神经网络中的最后一层分类层。</p>
<p>9用了一种新提出的tensor ring分解方法，对卷积和全连接层都进行了重新的表示。</p>
<p>10和9的方法一样，只不过任务不一样，不过10这篇论文写的真好，一读就懂。</p>
<p>11用了贝叶斯推理法，看不懂。</p>
<p>12是7,8的后续工作，将随机的思想添加了进来。</p>
<p>13主要研究的是分解前将参数reshape成哪种维度比较好，并且core tensor的维度怎么取比较好。</p>
<p>14试图通过张量对神经网络模型的可解释性进行探索，主要通过对tucker分解后的因子求偏导，比较大小。</p>
<p><strong>总结下来，其实并没有很大的飞跃，基本就是有了新的更好的张量分解方法就将其应用在网络的参数上；或是应用在不同的神经网络模型上；或是研究一下分解之前把全连接层的矩阵和卷积层的四维张量reshape成多大维度的张量。难点主要是秩的选择。因为张量分解中的秩决定分解后因子的维度，也就是决定了张量化后的网络模型的结构。而目前几乎所有的工作都是凭经验指定的或者通过实验挑选最优的。</strong></p>
<p>未来能刨的坑还有很多！</p>
<p>以上转载自博客 <a href="https://blog.csdn.net/sinat_38856440/article/details/104450094/" target="_blank" rel="noopener">link</a>.</p>
]]></content>
  </entry>
  <entry>
    <title>手把手教你使用 Hexo+Github 搭建个人博客！</title>
    <url>/2020/05/12/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8%20Hexo+Github%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%81/</url>
    <content><![CDATA[<p><strong>搭建自己的技术博客有很多种技术方案，我知道的有 Hexo, jeklly, vuepress  等。在此我通过使用 Hexo 并结合 Github 手把手教大家搭建自己的个人博客。让我们一起来看看吧！</strong></p>
<a id="more"></a>
<p><strong>1. Hexo简介</strong><br>Hexo 是一款基于 Node.js 的静态博客框架。Hexo 使用 Markdown 解析文章，用户在本地安装Hexo并进行写作，通过一条命令，Hexo即可利用靓丽的主题自动生成静态网页。<br>参考链接：<br><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">Hexo-Github地址</a><br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo帮助文档</a></p>
<p><strong>2. Hexo安装</strong><br>实验环境：Windows 10 64-bit。<br>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>
<ul>
<li>Node.js   (版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li>
<li>Git</li>
</ul>
<p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。<br><strong>2.1 安装 Node.js</strong><br>Node.js <a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载地址</a><br><img src="https://img-blog.csdnimg.cn/20200512145301642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下载稳定版本就可以。下载完成无特殊要求默认安装即可，一般不会出现问题。</p>
<p><strong>2.2 安装 Git</strong><br>Git <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载地址</a><br><img src="https://img-blog.csdnimg.cn/20200512145907784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下载完成无特殊要求默认安装即可，一般不会出现问题。这里有一点需要<strong>注意</strong>的是，在下图这一步骤如果选择第一项，则安装完成后会出现：<br><strong>‘git’不是内部或外部命令，也不是可运行的程序或批处理文件</strong>错误，此时需要手动添加相关路径到系统环境变量中即可解决。</p>
<p>具体为：<br><strong>C:\XXX\Git\bin<br>C:\XXX\Git\mingw64\libexec\git-core</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20200512150159674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>检查 Node 跟 Git 版本：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">v10.<span class="number">20.1</span></span><br><span class="line"></span><br><span class="line">$ git --<span class="keyword">version</span></span><br><span class="line">git <span class="keyword">version</span> <span class="number">2.25</span>.<span class="number">0</span>.windows.<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>2.3 安装 Hexo</strong><br>Git 和 Node.js 都安装好后，接下来在<strong>本地</strong>安装 Hexo，为了避免安装失败，需要切换到阿里云的 NPM 镜像：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> install -g cnpm --registry=https://registry.<span class="built_in">npm</span>.taobao.org</span><br></pre></td></tr></table></figure>
<p>创建一个用于存放博客文件的文件夹，如 /hexo/blog，然后进入 blog 文件夹全局安装并初始化 Hexo，右键选择 Git Bash Here ，弹出Git Bash窗口。执行命令：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>cnpm install -g hexo-cli</span><br><span class="line"><span class="variable">$ </span>hexo init</span><br></pre></td></tr></table></figure>
<p>安装完成后，指定文件夹的目录如下：</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">├── <span class="variable">_config</span>.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<p>其中_config.yml文件用于存放网站的配置信息，你可以在此配置大部分的参数；scaffolds是存放模板的文件夹，当新建文章时，Hexo会根据scaffold来建立文件；source是资源文件夹，用于存放用户资源，themes是主题文件夹，存放博客主题，Hexo 会根据主题来生成静态页面。</p>
<p>在Git Bash终端执行命令，生成静态博客文件：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br><span class="line"><span class="keyword">INFO</span>  <span class="keyword">Start</span> processing</span><br><span class="line"><span class="keyword">INFO</span>  Hexo <span class="keyword">is</span> running at http://localhost:<span class="number">4000</span> . Press Ctrl+C <span class="keyword">to</span> stop.</span><br></pre></td></tr></table></figure>
<p>Hexo 将 source 文件夹中的 Markdown 和 HTML 文件解析并放到 public 文件夹中，public 文件夹用于存放静态博客文件，相当于网站根目录。至此博客雏形基本完成，在浏览器中访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，如图所示：<br><img src="https://img-blog.csdnimg.cn/20200512151954561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>3. 将 Hexo 部署到 GitHub</strong><br><strong>3.1 新建 Git 仓库</strong><br>仓库名必须为 username.github.io 格式，其中 username 是你 GitHub 的用户名。<br><img src="https://img-blog.csdnimg.cn/20200512152321289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>按照下图找到自己 Github 的用户名：<br><img src="https://img-blog.csdnimg.cn/20200512152354393.png#pic_center" alt="在这里插入图片描述"><br><strong>3.2 部署</strong><br>快速在项目根目录下找到 _config.yml，找到 deploy 字段并填写完整。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> 你的仓库地址</span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure>
<p>这里<strong>注意</strong>，为了避免出现错误，我<strong>把 _config.yml 中的 Git 仓库链接改成了 SSH 链接，然后又给 Git 账户增加了 ssh key</strong>。</p>
<p>具体方法如下：</p>
<p>要使用自动部署首先要安装 hexo-deployer-git 工具：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>配置_config.yml中的deploy：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line"> <span class="attribute">type</span>: git</span><br><span class="line"> <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:your_github_user_name/your_github_user_name.github.io.git</span><br><span class="line"> <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>
<p><strong>注意：这里的 repo 需要设置成你 Git 仓库的 SSH 链接。</strong></p>
<p>命令行中输入：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen -t rsa -C youremail（换成你的邮箱地址）</span><br></pre></td></tr></table></figure>
<p>生成 ssh key。接着出现的一些步骤都可以回车跳过，如下图：<br><img src="https://img-blog.csdnimg.cn/20200512153309168.png#pic_center" alt="在这里插入图片描述"><br>这样在 C/Users/Administrator/.ssh/id_rsa.pub 文件中就生成了公钥。打开 id_rsa.pub 文件将一整串公钥拷贝下来，进入你的 Github 账户设置，在 ssh and GPG keys 中新增一个 ssh key 配置 Github 账户的 ssh key，如下图：<br><img src="https://img-blog.csdnimg.cn/20200512153648309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>把刚刚拷贝出来的公钥粘贴到 key 中，title 放空就好，如下图：<br><img src="https://img-blog.csdnimg.cn/20200512153810932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>验证 ssh key：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure>
<p>出现下面的语句说明你的 ssh key 已经配置好了：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Hi XXX! You<span class="symbol">'ve</span> successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell <span class="keyword">access</span>.</span><br></pre></td></tr></table></figure>
<p>初始化本地 Git 仓库，设置 Git 的 user name 和 email：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"XXX"</span>（换成你的用户名）</span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email <span class="string">"XXX"</span>（换成你的邮箱地址）</span><br></pre></td></tr></table></figure>
<p>在本地的 hexo init 生成的文件夹中初始化 Git 仓库：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git init</span><br></pre></td></tr></table></figure>
<p>将本地仓库和远程仓库连接（这一步骤可以不做）：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github<span class="selector-class">.com</span>:your_github_user_name/your_github_user_name<span class="selector-class">.github</span><span class="selector-class">.io</span>.git(远程仓库ssh地址)</span><br></pre></td></tr></table></figure>
<p>做完以上这些步骤，说明你的仓库可以使用 SSH 方式来上传下载代码，也不需要输入用户名和密码了。最后进行网站部署，如下：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> hexo clean  <span class="comment">//清除缓存文件db.json和已生成的静态文件public</span></span><br><span class="line"><span class="symbol">$</span> hexo g   <span class="comment">//生成网站静态文件到默认设置的public文件夹</span></span><br><span class="line"><span class="symbol">$</span> hexo d   <span class="comment">//部署网站到设定的仓库</span></span><br></pre></td></tr></table></figure>
<p>部署成功后会提示：<br><img src="https://img-blog.csdnimg.cn/2020051215454567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这样你的 Hexo 博客就部署到了 Github page 上了！</p>
<p><strong>至此，使用 Hexo+Github 搭建个人博客的整个过程及问题解决方法到此结束，关于对个人博客进行美化、设计等内容我将会再写一篇CSDN博客予以说明，各位小伙伴如果遇到问题请在评论区留言，我会及时回复帮助你解决！</strong></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>深度神经网络模型训练时GPU显存不足怎么办？</title>
    <url>/2020/05/12/%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%97%B6GPU%E6%98%BE%E5%AD%98%E4%B8%8D%E8%B6%B3%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<p>最近跑的模型都比较大，尤其是Bert， 这真的是难为我 1080ti 了， 在Bert的Example中，官方提供了一些 Trick 来帮助我们加速训练，很良心， 但感觉还不够，于是花费一些时间整理出一个 Trick 集合，来帮助我们在显存不足的时候来嘿嘿嘿。</p>
<p>本文分为两大部分，第一部分引入一个主题：如何估计模型所需显存， 第二个主题：GPU显存不足时的各种 Trick 。</p>
<p><strong>监控 GPU</strong></p>
<p>监控GPU最常用的当然是 nvidia-smi ，但有一个工具能够更好的展示信息：gpustat 。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nvidia<span class="literal">-smi</span></span><br><span class="line">watch -<span class="literal">-color</span> <span class="literal">-n1</span> gpustat <span class="literal">-cpu</span>   <span class="comment"># 动态事实监控GPU</span></span><br></pre></td></tr></table></figure>
<p>推荐在配置文件中配置别名，反正我每次 gpu 一下，信息就全出来了，很方便。</p>
<p>下面有同学推荐nvtop， 我简单试了试，的确挺好的，展现出现的信息很丰富 ， 推荐试一试。</p>
<p><strong>如何估计模型显存 [1]</strong><br>首先，思考一个问题： 模型中的哪些东西占据了我的显存，咋就动不动就 out of memory？</p>
<p>其实一个模型所占用的显存主要包含两部分： <strong>模型自身的参数， 优化器参数， 模型每层的输入输出。</strong></p>
<p>模型自身参数</p>
<p>模型自身的参数指的就是各个网络层的 Weight 和Bias，这部分显存在模型加载完成之后就会被占用， 注意到的是，有些层是有参数的，如CNN， RNN； 而有些层是无参数的， 如激活层， 池化层等。</p>
<p>从Pytorch 的角度来说，当你执行 model.to(device) 是， 你的模型就加载完毕，此时你的模型就已经加载完成了。</p>
<p>对于Pytorch来说，模型参数存储在 model.parameters() 中，因此，我们不需要自己计算，完全可以通过Pytorh来直接打印：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'Model &#123;&#125; : params: &#123;:4f&#125;M'</span>.format(model._get_name()， para * type_size / <span class="number">1000</span> / <span class="number">1000</span>))</span><br></pre></td></tr></table></figure>
<p><strong>优化器参数</strong></p>
<p>优化器参数指的是模型在优化过程即反向传播中所产生的参数， 这部分参数主要指的就是 dw， 即梯度，在SGD中， 其大小与参数一样， 因此在优化期间， 模型的参数所占用的显存会翻倍。</p>
<p>值得注意的是，不同的优化器其所需保存的优化参数不同， 对于 Adam， 由于其还需要保存其余参数， 模型的参数量会在优化区间翻 4 倍。</p>
<p><strong>模型每层的输入输出</strong></p>
<p><strong>首先</strong>，第一点是输入数据所占用的显存， 这部分所占用的显存其实并不大，这是因为我们往往采用迭代器的方式读取数据，这意味着我们其实并不是一次性的将所有数据读入显存，而这保证每次输入所占用的显存与整个网络参数来比是微不足道的。</p>
<p><strong>然后</strong>，在模型进行前向传播与反向传播时， 一个很重要的事情就是计算并保存每一层的输出以及其对应的梯度， 这意味着，这也占据了很大一部分显存。</p>
<p><strong>最后</strong>， 模型输出的显存占用可以总结为：</p>
<ul>
<li>每一层的输出(多维数组)， 其对应的梯度， 值得注意的是，模型输出不需要存储相应的动量信息（即此处如果使用Adam， 模型输出的参数量依旧是2倍而不是4倍， 我也不知道为啥？？求大佬指教）</li>
<li>输出的显存占用与 batch size 成正比</li>
</ul>
<p>那么有没有办法通过Pytorch来计算这部分参数量呢？ 答案是有的，我们可以假设一个batch的样本，然后通过 model.modules() 来对每一层进行遍历，获得每一层的输出shape， 然后就能够获得一个batch的数据的输出参数量。[2]</p>
<p><strong>所有的显存占用计算</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">显存占用 &#x3D; 模型自身参数 × n + batch size × 输出参数量 × 2 + 一个batch的输入数据（往往忽略）</span><br></pre></td></tr></table></figure>

<p>其中，n是根据优化算法来定的，如果选用SGD， 则 n = 2， 如果选择Adam， 则 n = 4.</p>
<p>一个很棒的实现如下， 我懒得再重新写了，你可以根据这个改一改，问题不大。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模型显存占用监测函数</span></span><br><span class="line"><span class="comment"># model：输入的模型</span></span><br><span class="line"><span class="comment"># input：实际中需要输入的Tensor变量</span></span><br><span class="line"><span class="comment"># type_size 默认为 4 默认类型为 float32 </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modelsize</span><span class="params">(model, input, type_size=<span class="number">4</span>)</span>:</span></span><br><span class="line">    para = sum([np.prod(list(p.size())) <span class="keyword">for</span> p <span class="keyword">in</span> model.parameters()])</span><br><span class="line">    print(<span class="string">'Model &#123;&#125; : params: &#123;:4f&#125;M'</span>.format(model._get_name(), para * type_size / <span class="number">1000</span> / <span class="number">1000</span>))</span><br><span class="line"> </span><br><span class="line">    input_ = input.clone()</span><br><span class="line">    input_.requires_grad_(requires_grad=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">    mods = list(model.modules())</span><br><span class="line">    out_sizes = []</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(mods)):</span><br><span class="line">        m = mods[i]</span><br><span class="line">        <span class="keyword">if</span> isinstance(m, nn.ReLU):</span><br><span class="line">            <span class="keyword">if</span> m.inplace:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        out = m(input_)</span><br><span class="line">        out_sizes.append(np.array(out.size()))</span><br><span class="line">        input_ = out</span><br><span class="line"> </span><br><span class="line">    total_nums = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(out_sizes)):</span><br><span class="line">        s = out_sizes[i]</span><br><span class="line">        nums = np.prod(np.array(s))</span><br><span class="line">        total_nums += nums</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    print(<span class="string">'Model &#123;&#125; : intermedite variables: &#123;:3f&#125; M (without backward)'</span></span><br><span class="line">          .format(model._get_name(), total_nums * type_size / <span class="number">1000</span> / <span class="number">1000</span>))</span><br><span class="line">    print(<span class="string">'Model &#123;&#125; : intermedite variables: &#123;:3f&#125; M (with backward)'</span></span><br><span class="line">          .format(model._get_name(), total_nums * type_size*<span class="number">2</span> / <span class="number">1000</span> / <span class="number">1000</span>))</span><br></pre></td></tr></table></figure>
<p><strong>GPU 显存不足时的Trick [2]</strong></p>
<p>此处不讨论多GPU， 分布式计算等情况，只讨论一些常规的 Trick， 会不定时进行更新。</p>
<p><strong>降低batch size</strong></p>
<p>这应该很好理解，适当降低batch size， 则模型每层的输入输出就会成线性减少， 效果相当明显。这里需要注意的一点是, dev batch size 的调整也有助于降低显存, 同时,不要将 dev 或 test 的batch size 设置为样本集长度, 我最近就干了这个傻事，害的我调试了一天才调出来是这个问题。</p>
<p><strong>选择更小的数据类型</strong></p>
<p>一般默认情况下， 整个网络中采用的是32位的浮点数，如果切换到 16位的浮点数，其显存占用量将接近呈倍数递减。</p>
<p><strong>精简模型</strong></p>
<p>在设计模型时，适当的精简模型，如原来两层的LSTM转为一层； 原来使用LSTM， 现在使用GRU； 减少卷积核数量； 尽量少的使用 Linear 等。</p>
<p><strong>数据角度</strong></p>
<p>对于文本数据来说，长序列所带来的参数量是呈线性增加的， 适当的缩小序列长度可以极大的降低参数量。</p>
<p><strong>total_loss</strong></p>
<p>考虑到 loss 本身是一个包含梯度信息的 tensor， 因此，正确的求损失和的方式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">total_loss +&#x3D; loss.item()</span><br></pre></td></tr></table></figure>

<p><strong>释放不需要的张量和变量</strong></p>
<p>采用del释放你不再需要的张量和变量，这也要求我们在写模型的时候注意变量的使用，不要随心所欲，漫天飞舞。</p>
<p><strong>Relu 的 inplace 参数</strong></p>
<p>激活函数 Relu() 有一个默认参数 inplace ，默认为Flase， 当设置为True的时候，我们在通过relu() 计算得到的新值不会占用新的空间而是直接覆盖原来的值，这表示设为True， 可以节省一部分显存。</p>
<p><strong>梯度累积</strong></p>
<p>首先， 要了解一些Pytorch的基本知识：</p>
<ul>
<li>在Pytorch 中，当我们执行 loss.backward() 时， 会为每个参数计算梯度，并将其存储在 paramter.grad 中， 注意到， paramter.grad 是一个张量， 其会累加每次计算得到的梯度。</li>
<li>在 Pytorch 中， 只有调用 optimizer.step()时才会进行梯度下降更新网络参数。 </li>
</ul>
<p>我们知道， batch size 与占用显存息息相关，但有时候我们的batch size 又不能设置的太小，这咋办呢？ 答案就是<strong>梯度累加</strong>。</p>
<p>我们先来看看传统训练：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i,(feature,target) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">    outputs = model(feature)  <span class="comment"># 前向传播</span></span><br><span class="line">    loss = criterion(outputs,target)  <span class="comment"># 计算损失</span></span><br><span class="line"> </span><br><span class="line">    optimizer.zero_grad()   <span class="comment"># 清空梯度</span></span><br><span class="line">    loss.backward()  <span class="comment"># 计算梯度</span></span><br><span class="line">    optimizer.step()  <span class="comment"># 反向传播， 更新网络参数</span></span><br></pre></td></tr></table></figure>

<p>而加入梯度累加之后，代码是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i,(features,target) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">    outputs = model(images)  <span class="comment"># 前向传播</span></span><br><span class="line">    loss = criterion(outputs,target)  <span class="comment"># 计算损失</span></span><br><span class="line">    loss = loss/accumulation_steps   <span class="comment"># 可选，如果损失要在训练样本上取平均</span></span><br><span class="line"> </span><br><span class="line">    loss.backward()  <span class="comment"># 计算梯度</span></span><br><span class="line">    <span class="keyword">if</span>((i+<span class="number">1</span>)%accumulation_steps)==<span class="number">0</span>:</span><br><span class="line">        optimizer.step()        <span class="comment"># 反向传播，更新网络参数</span></span><br><span class="line">        optimizer.zero_grad()   <span class="comment"># 清空梯度</span></span><br></pre></td></tr></table></figure>

<p>比较来看， 我们发现，梯度累加本质上就是累加 accumulation_steps 个batch 的梯度， 再根据累加的梯度来更新网络参数，以达到类似batch_size 为 accumulation_steps * batch_size 的效果。在使用时，需要注意适当的扩大学习率。</p>
<p>更详细来说， 我们假设 batch size = 32， accumulation steps = 8 ， 梯度积累首先在前向传播的时候讲 batch 分为 accumulation steps 份， 然后得到 size=4 的小份batch ， 每次就以小 batch 来计算梯度，但是不更新参数，将梯度积累下来，直到我们计算了 accumulation steps 个小 batch， 我们再更新参数。</p>
<p>梯度积累能很大程度上缓解GPU显存不足的问题，推荐使用。</p>
<p><strong>在Bert的仓库中，就使用了这个Trick，十分实用，简直是我们这种乞丐实验室的良心Trick。</strong></p>
<p><strong>梯度检查点</strong></p>
<p>这个Trick我没用过，毕竟模型还没有那么那么大。</p>
<p>等我用过再更新吧，先把坑挖下。</p>
<p><strong>最后</strong></p>
<p>哎， 如果你看完了这篇文章，就说明了一件事情： <strong>小伙子，你卡也不够啊。</strong>哎， 乞丐实验室不配深度学习，哭了。</p>
<p><strong>Reference</strong></p>
<p>[1]<a href="https://zhuanlan.zhihu.com/p/31558973" target="_blank" rel="noopener">科普帖：深度学习中GPU和显存分析</a></p>
<p>[2]<a href="https://link.zhihu.com/?target=https://oldpan.me/archives/how-to-use-memory-pytorch">如何在Pytorch中精细化利用显存</a></p>
<p>[3]<a href="https://link.zhihu.com/?target=https://www.jiqizhixin.com/articles/2018-10-17-11">GPU捉襟见肘还想训练大批量模型？谁说不可以</a></p>
<p>[4]<a href="https://www.zhihu.com/question/303070254" target="_blank" rel="noopener">PyTorch中在反向传播前为什么要手动将梯度清零？</a></p>
<p>[5]<a href="https://link.zhihu.com/?target=https://medium.com/huggingface/from-zero-to-research-an-introduction-to-meta-learning-8e16e677f78a">From zero to research — An introduction to Meta-learning</a></p>
<p>[6]<a href="https://link.zhihu.com/?target=https://medium.com/huggingface/training-larger-batches-practical-tips-on-1-gpu-multi-gpu-distributed-setups-ec88c3e51255">Training Neural Nets on Larger Batches: Practical Tips for 1-GPU, Multi-GPU &amp; Distributed setups</a></p>
]]></content>
  </entry>
  <entry>
    <title>直接调节风扇转速的Windows开源工具--Open Hardware Monitor</title>
    <url>/2020/05/12/%E7%9B%B4%E6%8E%A5%E8%B0%83%E8%8A%82%E9%A3%8E%E6%89%87%E8%BD%AC%E9%80%9F%E7%9A%84Windows%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7--Open%20Hardware%20Monitor/</url>
    <content><![CDATA[<p><strong>Open Hardware Monitor除了能监视系统温度、电压、风扇转速等传统项目外。还能控制风扇转速、远程监控、显示 Gadget 等。最重要的是它是开源的！最近一次更新是2020年3月1日，不过在此之前有将近4年的断更。</strong></p>
<p>Open Hardware Monitor 长这样：</p>
<p><img src="https://img-blog.csdnimg.cn/20200504145359119.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>控制风扇如上图所示：在 Fans（风扇）下，找到 Controls（控制），右键就可以手动设置速度了。</strong></p>
<p>如果你对硬件比较在意，那么来一份监控是十分方便的。</p>
<p>Open Hardware Monitor 是一个免费的开源软件，可以监控电脑上的温度传感器、风扇速度、电压、负载和时钟速度。支持目前市面上的大多数硬件监控芯片，通过读取 Intel 和 AMD 处理器的核心温度传感器，可以监测 CPU 温度。ATI 和 Nvidia 显卡的温度传感器以及 SMART 硬盘温度也可以显示。</p>
<p>Open Hardware Monitor 支持 32/64 位的 Windows XP / Vista / 7 / 7 / 8 / 8 / 8.1 / 10，以及其他 x86 的 Linux 操作系统，免安装。</p>
<p>Open Hardware Monitor <a href="https://openhardwaremonitor.org/" target="_blank" rel="noopener">官网</a>，在 GitHub 开源。<br>国内搬运下载<a href="https://tc5.us/file/15690961-440806741" target="_blank" rel="noopener">地址</a></p>
]]></content>
  </entry>
  <entry>
    <title>用来制作可启动U盘的Windows开源工具--Ventoy</title>
    <url>/2020/05/12/%E7%94%A8%E6%9D%A5%E5%88%B6%E4%BD%9C%E5%8F%AF%E5%90%AF%E5%8A%A8U%E7%9B%98%E7%9A%84Windows%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7--Ventoy/</url>
    <content><![CDATA[<p><strong>Ventoy 是一款开源的，用来制作可启动 U 盘的 Windows 工具，使用简单，只需要将多个系统镜像 ISO 文件拷贝至 U 盘，即可自动创建包含多个系统的启动菜单，来安装操作系统。并且该启动 U 盘还能当普通 U 盘使用。</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20200430162315282.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>都说一块 U 盘制作一个系统启动盘，Ventoy 最方便的地方就是你可以用它制作一块既能启动 Windows，也能启动 Linux 的启动盘，而且使用非常简单。</p>
<p>目前已测试过支持包括主流 Windows、服务器版 Windows、Debian、Ubuntu、CentOS、RHEL、Deepin，VMware ESXi 等系统 202 个，你要做的，只是下载系统镜像文件，然后直接拷贝进去就好了。Ventoy 会帮助你自动创建启动菜单。</p>
<p> <strong>1. 下载 Ventoy</strong><br> 首先，需要下载 Ventoy，有 Windows 与 Linux 两个版本，下载地址位于 GitHub，有能力的前往下载，提供两个国内转运下载地址，版本为2020年4月27日发布的 Ventoy 1.0.08 BETA2：<br><a href="https://appinn.lanzous.com/b0bqg1xqj" target="_blank" rel="noopener">蓝奏盘</a>：密码 eyk5<br><a href="https://www.ventoy.net/cn/index.html?ref=appinn?utm_source=www.appinn.com" target="_blank" rel="noopener">官方主页</a></p>
<p> <strong>2. 制作启动 U 盘</strong><br>插入 U 盘之后，Ventoy 会自动识别，只需要点击 Install 即可，会两次提醒格式化将会删除 U 盘数据。如果 Ventoy 有更新，点击 Update 更新即可。<br><img src="https://img-blog.csdnimg.cn/20200430163018711.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> <strong>3. Linux 安装方式请参考官方文档</strong><br> <a href="https://www.ventoy.net/cn/doc_start.html" target="_blank" rel="noopener">官方文档</a><br>启动盘依旧是普通 U 盘。Ventoy 最酷的地方，是成为启动 U 盘之后，还可以当普通 U 盘使用，保存普通文件，不影响 Ventoy 功能。</p>
<p> <strong>4. 复制系统 ISO 镜像文件</strong><br>制作好的启动 U 盘，表面上看起来还是一块普通 U 盘，文件管理器里什么文件都没有：<br><img src="https://img-blog.csdnimg.cn/20200430163338706.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>实际上，是因为 Ventoy 将 U 盘分为了两个分区：<br><img src="https://img-blog.csdnimg.cn/2020043016340823.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>EFI 分区被隐藏，无需理会。只需要将 ISO 文件拷贝到 U 盘里即可，比如直接将 Ubuntu 和 Windows XP 两个 ISO 系统镜像文件拷贝到Ventoy(E:) 盘下：<br><img src="https://img-blog.csdnimg.cn/20200430163447633.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>Ventoy 会自动扫码 U 盘里的所有 ISO 文件，包括子文件夹，但不支持中文文件夹名称。</p>
<p> <strong>5. 多系统启动</strong><br> 复制好系统镜像之后，直接拿去启动即可。<br><img src="https://img-blog.csdnimg.cn/20200430163530833.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pzZXJlbmRpcGl0eQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在虚拟机 PD 中测试成功，已经识别了两个 ISO 文件。选一个，就可以进入正常的系统安装流程了。</p>
<p><strong>6.Ventoy 特点列表</strong></p>
<ul>
<li>开源、易用</li>
<li>快速 （拷贝文件有多快就有多快）</li>
<li>直接从 ISO 文件启动，无需解开</li>
<li>无差异支持 Legacy + UEFI 模式</li>
<li>UEFI 模式支持安全启动 （Secure Boot）</li>
<li>支持超过 4GB 的 ISO 文件</li>
<li>保留 ISO 原始的启动菜单风格（Legacy &amp; UEFI）</li>
<li>支持大部分常见操作系统, 已测试 200+ 个 ISO 文件</li>
<li>不仅仅是启动，而是完整的安装过程</li>
<li>提出 “Ventoy Compatible” 概念</li>
<li>支持插件扩展</li>
<li>启动过程中支持 U 盘设置写保护</li>
<li>不影响 U 盘日常普通使用</li>
<li>版本升级时数据不会丢失</li>
<li>无需跟随操作系统升级而升级 Ventoy</li>
</ul>
<p><strong>7.最后</strong><br>至此，一个系统启动 U 盘、一个普通 U 盘合二为一的 Ventoy 启动盘已经制作完成，想要添加新的系统只需要更新 U 盘里的 ISO 系统镜像文件即可，也不影响当作普通 U 盘保存文件使用，非常方便。<strong>各位小伙伴快快收藏以备不时之需吧！</strong></p>
]]></content>
  </entry>
</search>
